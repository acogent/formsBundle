<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {% if fields|length > 0 %}
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        // Si vous souhaitez personnaliser votre formulaire selon des données soumises, décommentez la fonction onChangeField de la classe. À utiliser de la sorte : ->add('geoCid', 'sgn_ajax_autocomplete', array('label' => 'nivern.geoCid.label', 'entity_alias'=>'geocids', 'attr' => array('onchange' => $this->onChangeField())))

        $builder
                // ->add('ajax', 'hidden', array('mapped' => FALSE)) // champ à activer si vous voulez modifier dynamiquement le formulaire
        {%- for field in fields %}
{% if 'date' in field %}
                ->add('{{ field }}', 'date', array('input'  => 'datetime', 'widget' => 'single_text', 'label' => '{{ entity_class|lower }}.{{ field }}.label'))
{% else %}
                ->add('{{ field }}', null, array('label' => '{{ entity_class|lower }}.{{ field }}.label'))
{% endif %}
        {%- endfor %}
        
         {% if fieldsManyToOne|length > 0 %}
       // Champs ManyToOne
             {%- for field in fieldsManyToOne %}

                ->add('{{ field }}', null, array('label' => '{{ entity_class|lower }}.{{ field }}.label'))
             // Si vous voulez une gestion de liste de choix avec Ajax, supprimez la liste ci-dessus et décommentez celle ci-dessous. N'oubliez pas de déclarer votre entité dans config.yml ou mieux dans sgn_forms.yml
             // ->add('{{ field }}', 'sgn_ajax_autocomplete',    array('label' => '{{ entity_class|lower }}.{{ field }}.label','entity_alias'=>'{{ field|lower }}s' ))
             {%- endfor %}
         {% endif %}
        ;

         {% if fieldsOneToMany|length > 0 %}
       // Champs OneToMany
             {%- for field in fieldsOneToMany %}

/* 
        $builder->add('{{ field }}', 'collection', array(
            'type' => new {{ field }}Type(),
            'prototype' => true,
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'cascade_validation' => true,
            ));
*/
             {%- endfor %}
                
         {% endif %}

         // Si vous avez des règles de validation personnelles, utilisez l’Ajax pour soumettre le formulaire : décommentez les deux lignes ci-dessous et la fonction onClickSubmitForm de la classe.
        $builder->addEventListener(FormEvents::PRE_SET_DATA, function(FormEvent $event) {
            $obj  = $event->getData();
            $form = $event->getForm();
            if (isset ($obj)  && $obj->getId())
            {
                $form
                ->add('submit', 'submit', array(
                   'label' => 'Modifier',
                   // 'attr'  => array('onclick' => $this->onClickSubmitForm())
                   ))
                ;
            } else {
                 $form
                 ->add('submit', 'submit', array(
                   'label' => 'Ajouter',
                   // 'attr'  => array('onclick' => $this->onClickSubmitForm())
                 ))
                ;
            }
        });

        // Si vous souhaitez personnaliser votre formulaire selon des données soumises, utilisez des listeners du type :
/*
        $builder->addEventListener(
            FormEvents::PRE_SET_DATA, 
            function(FormEvent $event){
                $form = $event->getForm();
                $obj = $event->getData(); // ici : {{ entity_class }}
                ∕∕ Vous pouvez appeler une fonction qui modifie le formulaire.
            }
        );

        $builders->addEventListener(FormEvents::PRE_SUBMIT, function(FormEvent $event) {
            $newObj = $event->getData();

            if (...) {
                // Vous pouvez faire des traitements, puis modifier l'objet.
                $event->setData($newObj);
            }
        });

        // Ici, monChamp est un champ de votre formulaire
        $builder->get('monChamp')->addEventListener(
            FormEvents::POST_SUBMIT, 
            function(FormEvent $event){
                $form = $event->getForm(); // ici : FormInterface de monChamp
                // Dans le cas d’un formulaire modifié dynamiquement :
              //  if ($form->getParent()->get('ajax')->getData() == 'true')
              //  {
              //      ∕∕ Vous pouvez appeler une fonction qui modifie le formulaire.
              //  }
                ∕∕ Ici, vous pouvez appeler une fonction qui modifie le formulaire.
            }
        );

        // Pour empêcher le ValidationListener d'être appelé dans le cas de formulaire modifié dynamique via Ajax :
        $builder->addEventListener(FormEvents::POST_SUBMIT, function($event) {
            $event->stopPropagation();
        }, 900); // priorité plus grande que le ValidationListener

*/

    }

    {% endif %}

    /**
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}'
        ));
    }

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }

    /**
     * Cette méthode renvoie la requête JQuery à associer à l’événement onChange d’un champ du formulaire, dans le cas de modification dynamique.
     *
     * @return string jquery
     */
    private function onChangeField()
    {
        $jquery = "$('#".$this->getName()."_ajax').val('true'); ";
        $jquery.= "ajaxFormRequest(this.form, 'dynamic');";

        return $jquery;
    }

    /**
     * Cette méthode renvoie la requête JQuery à associer à l’événement onClick d’un bouton Submit du formulaire, dans le cas d’une validation par Ajax.
     *
     * @return string jquery
     */
    private function onClickSubmitForm()
    {
        // Si vous modifiez dynamiquement le formulaire, décommentez cette ligne :
        // $jquery = "$('#".$this->getName()."_ajax').val('false'); ";
        $jquery.= "ajaxFormRequest(this.form, 'validate');";

        return $jquery;
    }
{% endblock class_body %}
}
