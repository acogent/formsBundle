<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
// use BDG\DatabaseBundle\Form\Type\FormTools;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType /* FormTools */
{% endblock class_definition %}
{
{% block class_body %}
    {% if fields|length > 0 %}

/**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        /* Si vous souhaitez personnaliser votre formulaire selon des données soumises,
            décommentez la ligne suivante. À utiliser de la sorte :
            $builder->add('geoCid', 'sgn_ajax_autocomplete', array('label' => 'nivern.geoCid.label',
            'entity_alias'=>'geocids', 'attr' => array('onchange' => $onChange)))
            La fonction $this->onChangeField('true') est contenu dans  Model\FormTools
        */
        //  $onChange = $this->onChangeField('true');

        // champ à activer si vous voulez modifier dynamiquement le formulaire
        // $builder->add('ajax', 'hidden', array('mapped' => false));

        {%- for field in fields %}
{% if 'majDate' not in field %}
{% if 'date' in field %}
        $builder->add('{{ field }}', 'date', array('input'  => 'datetime', 'widget' => 'single_text', 'label' => '{{ entity_class|lower }}.{{ field }}.label'));
{% else %}
        $builder->add('{{ field }}', null, array('label' => '{{ entity_class|lower }}.{{ field }}.label'));
{% endif %}

{% endif %}

        {%- endfor %}


        {% if fieldsManyToOne|length > 0 %}

        // Champs ManyToOne
        // Si vous voulez une gestion de liste de choix avec Ajax,
        // supprimez la liste ci-dessus et décommentez celle ci-dessous.
        // N'oubliez pas de déclarer votre entité dans config.yml ou mieux dans sgn_forms.yml
             {%- for field in fieldsManyToOne %}

        $builder->add('{{ field }}', null, array('label' => '{{ entity_class|lower }}.{{ field }}.label'));
        // $builder->add('{{ field }}', 'sgn_ajax_autocomplete', array('label' => '{{ entity_class|lower }}.{{ field }}.label', 'entity_alias'=>'{{ field|lower }}s' ));
             {%- endfor %}
        {% endif %}

        {% if fieldsOneToMany|length > 0 %}
    // Champs OneToMany
             {%- for field in fieldsOneToMany %}

        /* $builder->add('{{ field }}','collection', array('type' => new {{ field }}Type(), 'prototype' => true, 'allow_add' => true, 'allow_delete' => true, 'by_reference' => false, 'cascade_validation' => true)); */
             {%- endfor %}

         {% endif %}

        // si votre formulaire d'édition est différent du formulaire d'ajout
        /*
         * Fonction qui modifie le formulaire pour l’édition.
         */
        $fmEdit = function (FormInterface $form) {
            //$form->add('niveRn', 'sgn_ajax_autocomplete', array('label' => 'nivRn.label', 'entity_alias' => 'niverns_select', 'read_only' => true));
        };

        $fmAdd = function (FormInterface $form) {
            //$form->add('niveRn', 'sgn_ajax_autocomplete', array('label' => 'nivRn.label', 'entity_alias' => 'niverns_select', 'read_only' => false));
        };


         // Si vous avez des règles de validation personnelles,
         // utilisez l’Ajax pour soumettre le formulaire : décommentez la ligne ci-dessous
         // et "use" la fonction .

        // $onClickSubmit = $this->onClickSubmitForm('false');

        $builder->addEventListener(
            FormEvents::PRE_SET_DATA,
            function(FormEvent $event) use ($fmEdit /*, $onClickSubmit */) {
                $obj     = $event->getData();
                $form    = $event->getForm();
                if (isset ($obj) === true && $obj->getId() > 0) {
                    $fmEdit($form);
                    // $form->add('majDate', 'text', array('read_only' => true, 'label' => 'majDate.label'));
                    $form->add('submit', 'submit', array('label' => 'Modifier', 'attr'  => array('class' => 'btn btn-danger btn-lg' /*, 'onclick' => $onClickSubmit*/));

                    return;
                }

                $form->add('submit', 'submit', array('label' => 'Ajouter', 'attr'  => array('class' => 'btn btn-danger btn-lg' /*, 'onclick' => $onClickSubmit*/ ));
            }
        );

        // Si vous souhaitez personnaliser votre formulaire selon des données soumises,
        // utilisez des listeners du type :
        /*
        $builder->addEventListener(
            FormEvents::PRE_SET_DATA,
            function(FormEvent $event){
                $form = $event->getForm();
                $obj = $event->getData(); // ici : {{ entity_class }}
                ∕∕ Vous pouvez appeler une fonction qui modifie le formulaire.
            }
        );

        $builders->addEventListener(
            FormEvents::PRE_SUBMIT,
            function(FormEvent $event) {
            $newObj = $event->getData();

            if (...) {
                // Vous pouvez faire des traitements, puis modifier l'objet.
                $event->setData($newObj);
            }
        });

        // Ici, monChamp est un champ de votre formulaire
        $builder->get('monChamp')->addEventListener(
            FormEvents::POST_SUBMIT,
            function(FormEvent $event){
                $form = $event->getForm(); // ici : FormInterface de monChamp
                // Dans le cas d’un formulaire modifié dynamiquement :
              //  if ($form->getParent()->get('ajax')->getData() === 'true') {
              //      ∕∕ Vous pouvez appeler une fonction qui modifie le formulaire.
              //  }
                ∕∕ Ici, vous pouvez appeler une fonction qui modifie le formulaire.
            }
        );

        // Pour empêcher le ValidationListener d'être appelé dans le cas de formulaire modifié dynamique via Ajax :
        $builder->addEventListener(
            FormEvents::POST_SUBMIT,
            function($event) {
                $event->stopPropagation();
            }, 900); // priorité plus grande que le ValidationListener

        */

    }
    {% endif %}



    /**
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(
            array(
             'data_class'         => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}',
             'translation_domain' => 'messages',
            )
        );
    }


    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }


    /**
     * Cette méthode renvoie la requête JQuery à associer à l’événement onChange d’un champ du formulaire, dans le cas de modification dynamique.
     *
     * @return string jquery
     */

{% endblock class_body %}
}
